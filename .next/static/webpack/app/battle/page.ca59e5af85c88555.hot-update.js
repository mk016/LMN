"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/battle/page",{

/***/ "(app-pages-browser)/./src/services/paymentService.ts":
/*!****************************************!*\
  !*** ./src/services/paymentService.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PaymentService: function() { return /* binding */ PaymentService; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n\n\nclass PaymentService {\n    static async getProvider() {\n        if (!window.ethereum) {\n            throw new Error(\"Please install MetaMask\");\n        }\n        return new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(window.ethereum);\n    }\n    static async payEntryFee(roomId, amount) {\n        try {\n            const ethereum = window.ethereum;\n            if (!ethereum) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Please install MetaMask\");\n                return false;\n            }\n            await this.switchToSepolia(ethereum);\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(ethereum);\n            const signer = await provider.getSigner();\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_2__.Contract(this.CONTRACT_ADDRESS, this.ABI, signer);\n            const entryFee = await contract.entryFee();\n            console.log(\"Entry fee from contract:\", entryFee.toString());\n            // Join battle with roomId\n            const tx = await contract.joinBattle(roomId, {\n                value: entryFee,\n                gasLimit: 200000\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Processing payment...\");\n            const receipt = await tx.wait();\n            console.log(\"Battle joined:\", receipt);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Successfully joined battle!\");\n            return true;\n        } catch (error) {\n            console.error(\"Payment error:\", error);\n            if (error.code === 4001) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Transaction rejected. Please try again.\");\n            } else if (error.code === -32603) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Insufficient funds for transaction\");\n            } else {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(error.message || \"Payment failed\");\n            }\n            return false;\n        }\n    }\n    static async transferWinningsToWinner(roomId, winnerAddress) {\n        try {\n            const ethereum = window.ethereum;\n            if (!ethereum) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Please install MetaMask\");\n                return false;\n            }\n            await this.switchToSepolia(ethereum);\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(ethereum);\n            const signer = await provider.getSigner();\n            const contract = new ethers__WEBPACK_IMPORTED_MODULE_2__.Contract(this.CONTRACT_ADDRESS, this.ABI, signer);\n            const tx = await contract.declareWinner(roomId, winnerAddress, {\n                gasLimit: 200000\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Processing winner payment...\");\n            const receipt = await tx.wait();\n            console.log(\"Winner payment confirmed:\", receipt);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Prize transferred to winner!\");\n            return true;\n        } catch (error) {\n            console.error(\"Prize transfer error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Failed to transfer prize to winner\");\n            return false;\n        }\n    }\n    static async switchToSepolia(ethereum) {\n        try {\n            await ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: this.SEPOLIA_CHAIN_ID\n                    }\n                ]\n            });\n        } catch (error) {\n            if (error.code === 4902) {\n                await ethereum.request({\n                    method: \"wallet_addEthereumChain\",\n                    params: [\n                        {\n                            chainId: this.SEPOLIA_CHAIN_ID,\n                            chainName: \"Sepolia Test Network\",\n                            nativeCurrency: {\n                                name: \"SepoliaETH\",\n                                symbol: \"SEP\",\n                                decimals: 18\n                            },\n                            rpcUrls: [\n                                \"https://sepolia.infura.io/v3/\"\n                            ],\n                            blockExplorerUrls: [\n                                \"https://sepolia.etherscan.io\"\n                            ]\n                        }\n                    ]\n                });\n            } else {\n                throw error;\n            }\n        }\n    }\n    // Add this function to generate random wallet addresses\n    static generateRandomWalletAddress() {\n        const chars = \"0123456789abcdef\";\n        let address = \"0x\";\n        // Generate 40 characters (20 bytes) for the address\n        for(let i = 0; i < 40; i++){\n            address += chars[Math.floor(Math.random() * chars.length)];\n        }\n        return address;\n    }\n    static async getConnectedWalletAddress() {\n        try {\n            if (!window.ethereum) {\n                throw new Error(\"Please install MetaMask\");\n            }\n            const ethereum = window.ethereum;\n            const accounts = await ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            return accounts[0];\n        } catch (error) {\n            console.error(\"Failed to get wallet address:\", error);\n            throw error;\n        }\n    }\n}\nPaymentService.CONTRACT_ADDRESS = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\";\nPaymentService.SEPOLIA_CHAIN_ID = \"0xaa36a7\";\nPaymentService.ABI = [\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"roomId\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"joinBattle\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"roomId\",\n                \"type\": \"string\"\n            },\n            {\n                \"internalType\": \"address\",\n                \"name\": \"winner\",\n                \"type\": \"address\"\n            }\n        ],\n        \"name\": \"declareWinner\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [],\n        \"name\": \"entryFee\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/paymentService.ts\n"));

/***/ })

});