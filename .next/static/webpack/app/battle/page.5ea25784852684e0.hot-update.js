"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/battle/page",{

/***/ "(app-pages-browser)/./src/services/paymentService.ts":
/*!****************************************!*\
  !*** ./src/services/paymentService.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PaymentService: function() { return /* binding */ PaymentService; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n\n\nclass PaymentService {\n    static async getProvider() {\n        if (!window.ethereum) {\n            throw new Error(\"Please install MetaMask\");\n        }\n        return new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(window.ethereum);\n    }\n    static async payEntryFee(amount) {\n        try {\n            const ethereum = window.ethereum;\n            if (!ethereum) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Please install MetaMask\");\n                return false;\n            }\n            await this.switchToSepolia(ethereum);\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(ethereum);\n            const signer = await provider.getSigner();\n            const balance = await provider.getBalance(await signer.getAddress());\n            // Check if user has enough Sepolia ETH\n            if (balance < ethers__WEBPACK_IMPORTED_MODULE_2__.parseEther(amount)) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Insufficient Sepolia ETH. Get test ETH from Sepolia faucet: https://sepoliafaucet.com\", {\n                    duration: 6000\n                });\n                window.open(\"https://sepoliafaucet.com\", \"_blank\");\n                return false;\n            }\n            // Rest of the payment logic...\n            const tx = await signer.sendTransaction({\n                to: this.PLATFORM_WALLET,\n                value: ethers__WEBPACK_IMPORTED_MODULE_2__.parseEther(amount),\n                gasLimit: 21000 // Use fixed gas limit for simple transfers\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Processing payment...\");\n            const receipt = await tx.wait();\n            console.log(\"Payment confirmed:\", receipt);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Payment successful!\");\n            return true;\n        } catch (error) {\n            console.error(\"Payment error:\", error);\n            if (error.code === \"INSUFFICIENT_FUNDS\") {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Insufficient Sepolia ETH. Please get test ETH from the faucet.\");\n                window.open(\"https://sepoliafaucet.com\", \"_blank\");\n            } else {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(error.message || \"Payment failed\");\n            }\n            return false;\n        }\n    }\n    static async transferWinningsToWinner(winnerAddress, amount) {\n        try {\n            const ethereum = window.ethereum;\n            if (!ethereum) {\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Please install MetaMask\");\n                return false;\n            }\n            await this.switchToSepolia(ethereum);\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.BrowserProvider(ethereum);\n            const signer = await provider.getSigner();\n            // Calculate total prize (2 * entry fee)\n            const totalPrize = ethers__WEBPACK_IMPORTED_MODULE_2__.parseEther(amount) * BigInt(2);\n            console.log(\"Transferring prize to winner:\", {\n                winnerAddress,\n                amount: totalPrize.toString(),\n                network: \"Sepolia\"\n            });\n            const tx = await signer.sendTransaction({\n                to: winnerAddress,\n                value: totalPrize,\n                gasLimit: 21000\n            });\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Processing prize transfer...\");\n            const receipt = await tx.wait();\n            console.log(\"Prize transfer confirmed:\", receipt);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.success(\"Prize transferred to winner!\");\n            return true;\n        } catch (error) {\n            console.error(\"Prize transfer error:\", error);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Failed to transfer prize to winner\");\n            return false;\n        }\n    }\n    static async switchToSepolia(ethereum) {\n        try {\n            await ethereum.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: this.SEPOLIA_CHAIN_ID\n                    }\n                ]\n            });\n        } catch (error) {\n            if (error.code === 4902) {\n                await ethereum.request({\n                    method: \"wallet_addEthereumChain\",\n                    params: [\n                        {\n                            chainId: this.SEPOLIA_CHAIN_ID,\n                            chainName: \"Sepolia Test Network\",\n                            nativeCurrency: {\n                                name: \"SepoliaETH\",\n                                symbol: \"SEP\",\n                                decimals: 18\n                            },\n                            rpcUrls: [\n                                \"https://sepolia.infura.io/v3/\"\n                            ],\n                            blockExplorerUrls: [\n                                \"https://sepolia.etherscan.io\"\n                            ]\n                        }\n                    ]\n                });\n            } else {\n                throw error;\n            }\n        }\n    }\n    // Add this function to generate random wallet addresses\n    static generateRandomWalletAddress() {\n        const chars = \"0123456789abcdef\";\n        let address = \"0x\";\n        // Generate 40 characters (20 bytes) for the address\n        for(let i = 0; i < 40; i++){\n            address += chars[Math.floor(Math.random() * chars.length)];\n        }\n        return address;\n    }\n    static async getConnectedWalletAddress() {\n        try {\n            if (!window.ethereum) {\n                throw new Error(\"Please install MetaMask\");\n            }\n            const ethereum = window.ethereum;\n            const accounts = await ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            return accounts[0];\n        } catch (error) {\n            console.error(\"Failed to get wallet address:\", error);\n            throw error;\n        }\n    }\n}\nPaymentService.PLATFORM_WALLET = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\";\nPaymentService.SEPOLIA_CHAIN_ID = \"0xaa36a7\";\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9wYXltZW50U2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdDO0FBQ1E7QUFRakMsTUFBTUU7SUFJWCxhQUFxQkMsY0FBYztRQUNqQyxJQUFJLENBQUMsT0FBZ0JFLFFBQVEsRUFBRTtZQUM3QixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFDQSxPQUFPLElBQUlOLG1EQUFzQixDQUFDLE9BQWdCSyxRQUFRO0lBQzVEO0lBRUEsYUFBYUcsWUFBWUMsTUFBYyxFQUFvQjtRQUN6RCxJQUFJO1lBQ0YsTUFBTUosV0FBVyxPQUFnQkEsUUFBUTtZQUN6QyxJQUFJLENBQUNBLFVBQVU7Z0JBQ2JKLGtEQUFLQSxDQUFDUyxLQUFLLENBQUM7Z0JBQ1osT0FBTztZQUNUO1lBRUEsTUFBTSxJQUFJLENBQUNDLGVBQWUsQ0FBQ047WUFFM0IsTUFBTU8sV0FBVyxJQUFJWixtREFBc0IsQ0FBQ0s7WUFDNUMsTUFBTVEsU0FBUyxNQUFNRCxTQUFTRSxTQUFTO1lBQ3ZDLE1BQU1DLFVBQVUsTUFBTUgsU0FBU0ksVUFBVSxDQUFDLE1BQU1ILE9BQU9JLFVBQVU7WUFFakUsdUNBQXVDO1lBQ3ZDLElBQUlGLFVBQVVmLDhDQUFpQixDQUFDUyxTQUFTO2dCQUN2Q1Isa0RBQUtBLENBQUNTLEtBQUssQ0FDVCx5RkFDQTtvQkFBRVMsVUFBVTtnQkFBSztnQkFFbkJmLE9BQU9nQixJQUFJLENBQUMsNkJBQTZCO2dCQUN6QyxPQUFPO1lBQ1Q7WUFFQSwrQkFBK0I7WUFDL0IsTUFBTUMsS0FBSyxNQUFNUixPQUFPUyxlQUFlLENBQUM7Z0JBQ3RDQyxJQUFJLElBQUksQ0FBQ0MsZUFBZTtnQkFDeEJDLE9BQU96Qiw4Q0FBaUIsQ0FBQ1M7Z0JBQ3pCaUIsVUFBVSxNQUFNLDJDQUEyQztZQUM3RDtZQUVBekIsa0RBQUtBLENBQUMwQixPQUFPLENBQUM7WUFDZCxNQUFNQyxVQUFVLE1BQU1QLEdBQUdRLElBQUk7WUFFN0JDLFFB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Q2xCO1lBRUEsTUFBTUQsV0FBVyxPQUFnQkEsUUFBUTtZQUN6QyxNQUFNd0QsV0FBVyxNQUFNeEQsU0FBU21DLE9BQU8sQ0FBQztnQkFDdENDLFFBQVE7WUFDVjtZQUVBLE9BQU9vQixRQUFRLENBQUMsRUFBRTtRQUNwQixFQUFFLE9BQU9uRCxPQUFPO1lBQ2RvQixRQUFRcEIsS0FBSyxDQUFDLGlDQUFpQ0E7WUFDL0MsTUFBTUE7UUFDUjtJQUNGO0FBQ0Y7QUFwS2FSLGVBQ2FzQixrQkFBa0I7QUFEL0J0QixlQUVhMEMsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9zZXJ2aWNlcy9wYXltZW50U2VydmljZS50cz9lNmJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyB0b2FzdCB9IGZyb20gJ3JlYWN0LWhvdC10b2FzdCc7XG5cbmludGVyZmFjZSBQYXltZW50RGV0YWlscyB7XG4gIGFtb3VudDogbnVtYmVyO1xuICBwbGF5ZXJOYW1lOiBzdHJpbmc7XG4gIHdhbGxldEFkZHJlc3M6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFBheW1lbnRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUExBVEZPUk1fV0FMTEVUID0gXCIweDc0MmQzNUNjNjYzNEMwNTMyOTI1YTNiODQ0QmM0NTRlNDQzOGY0NGVcIjtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgU0VQT0xJQV9DSEFJTl9JRCA9ICcweGFhMzZhNyc7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgZ2V0UHJvdmlkZXIoKSB7XG4gICAgaWYgKCEod2luZG93IGFzIGFueSkuZXRoZXJldW0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGluc3RhbGwgTWV0YU1hc2snKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBldGhlcnMuQnJvd3NlclByb3ZpZGVyKCh3aW5kb3cgYXMgYW55KS5ldGhlcmV1bSk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcGF5RW50cnlGZWUoYW1vdW50OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZXRoZXJldW0gPSAod2luZG93IGFzIGFueSkuZXRoZXJldW07XG4gICAgICBpZiAoIWV0aGVyZXVtKSB7XG4gICAgICAgIHRvYXN0LmVycm9yKCdQbGVhc2UgaW5zdGFsbCBNZXRhTWFzaycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMuc3dpdGNoVG9TZXBvbGlhKGV0aGVyZXVtKTtcblxuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLkJyb3dzZXJQcm92aWRlcihldGhlcmV1bSk7XG4gICAgICBjb25zdCBzaWduZXIgPSBhd2FpdCBwcm92aWRlci5nZXRTaWduZXIoKTtcbiAgICAgIGNvbnN0IGJhbGFuY2UgPSBhd2FpdCBwcm92aWRlci5nZXRCYWxhbmNlKGF3YWl0IHNpZ25lci5nZXRBZGRyZXNzKCkpO1xuXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGhhcyBlbm91Z2ggU2Vwb2xpYSBFVEhcbiAgICAgIGlmIChiYWxhbmNlIDwgZXRoZXJzLnBhcnNlRXRoZXIoYW1vdW50KSkge1xuICAgICAgICB0b2FzdC5lcnJvcihcbiAgICAgICAgICAnSW5zdWZmaWNpZW50IFNlcG9saWEgRVRILiBHZXQgdGVzdCBFVEggZnJvbSBTZXBvbGlhIGZhdWNldDogaHR0cHM6Ly9zZXBvbGlhZmF1Y2V0LmNvbScsXG4gICAgICAgICAgeyBkdXJhdGlvbjogNjAwMCB9XG4gICAgICAgICk7XG4gICAgICAgIHdpbmRvdy5vcGVuKCdodHRwczovL3NlcG9saWFmYXVjZXQuY29tJywgJ19ibGFuaycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc3Qgb2YgdGhlIHBheW1lbnQgbG9naWMuLi5cbiAgICAgIGNvbnN0IHR4ID0gYXdhaXQgc2lnbmVyLnNlbmRUcmFuc2FjdGlvbih7XG4gICAgICAgIHRvOiB0aGlzLlBMQVRGT1JNX1dBTExFVCxcbiAgICAgICAgdmFsdWU6IGV0aGVycy5wYXJzZUV0aGVyKGFtb3VudCksXG4gICAgICAgIGdhc0xpbWl0OiAyMTAwMCAvLyBVc2UgZml4ZWQgZ2FzIGxpbWl0IGZvciBzaW1wbGUgdHJhbnNmZXJzXG4gICAgICB9KTtcblxuICAgICAgdG9hc3Quc3VjY2VzcygnUHJvY2Vzc2luZyBwYXltZW50Li4uJyk7XG4gICAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgdHgud2FpdCgpO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnUGF5bWVudCBjb25maXJtZWQ6JywgcmVjZWlwdCk7XG4gICAgICB0b2FzdC5zdWNjZXNzKCdQYXltZW50IHN1Y2Nlc3NmdWwhJyk7XG4gICAgICBcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcignUGF5bWVudCBlcnJvcjonLCBlcnJvcik7XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ0lOU1VGRklDSUVOVF9GVU5EUycpIHtcbiAgICAgICAgdG9hc3QuZXJyb3IoJ0luc3VmZmljaWVudCBTZXBvbGlhIEVUSC4gUGxlYXNlIGdldCB0ZXN0IEVUSCBmcm9tIHRoZSBmYXVjZXQuJyk7XG4gICAgICAgIHdpbmRvdy5vcGVuKCdodHRwczovL3NlcG9saWFmYXVjZXQuY29tJywgJ19ibGFuaycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9hc3QuZXJyb3IoZXJyb3IubWVzc2FnZSB8fCAnUGF5bWVudCBmYWlsZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgdHJhbnNmZXJXaW5uaW5nc1RvV2lubmVyKFxuICAgIHdpbm5lckFkZHJlc3M6IHN0cmluZywgXG4gICAgYW1vdW50OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGV0aGVyZXVtID0gKHdpbmRvdyBhcyBhbnkpLmV0aGVyZXVtO1xuICAgICAgaWYgKCFldGhlcmV1bSkge1xuICAgICAgICB0b2FzdC5lcnJvcignUGxlYXNlIGluc3RhbGwgTWV0YU1hc2snKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCB0aGlzLnN3aXRjaFRvU2Vwb2xpYShldGhlcmV1bSk7XG5cbiAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5Ccm93c2VyUHJvdmlkZXIoZXRoZXJldW0pO1xuICAgICAgY29uc3Qgc2lnbmVyID0gYXdhaXQgcHJvdmlkZXIuZ2V0U2lnbmVyKCk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSB0b3RhbCBwcml6ZSAoMiAqIGVudHJ5IGZlZSlcbiAgICAgIGNvbnN0IHRvdGFsUHJpemUgPSBldGhlcnMucGFyc2VFdGhlcihhbW91bnQpICogQmlnSW50KDIpO1xuXG4gICAgICBjb25zb2xlLmxvZygnVHJhbnNmZXJyaW5nIHByaXplIHRvIHdpbm5lcjonLCB7XG4gICAgICAgIHdpbm5lckFkZHJlc3MsXG4gICAgICAgIGFtb3VudDogdG90YWxQcml6ZS50b1N0cmluZygpLFxuICAgICAgICBuZXR3b3JrOiAnU2Vwb2xpYSdcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHNpZ25lci5zZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICB0bzogd2lubmVyQWRkcmVzcyxcbiAgICAgICAgdmFsdWU6IHRvdGFsUHJpemUsXG4gICAgICAgIGdhc0xpbWl0OiAyMTAwMFxuICAgICAgfSk7XG5cbiAgICAgIHRvYXN0LnN1Y2Nlc3MoJ1Byb2Nlc3NpbmcgcHJpemUgdHJhbnNmZXIuLi4nKTtcbiAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0eC53YWl0KCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCdQcml6ZSB0cmFuc2ZlciBjb25maXJtZWQ6JywgcmVjZWlwdCk7XG4gICAgICB0b2FzdC5zdWNjZXNzKCdQcml6ZSB0cmFuc2ZlcnJlZCB0byB3aW5uZXIhJyk7XG4gICAgICBcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcignUHJpemUgdHJhbnNmZXIgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdG9hc3QuZXJyb3IoJ0ZhaWxlZCB0byB0cmFuc2ZlciBwcml6ZSB0byB3aW5uZXInKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyBzd2l0Y2hUb1NlcG9saWEoZXRoZXJldW06IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBldGhlcmV1bS5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAnd2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW4nLFxuICAgICAgICBwYXJhbXM6IFt7IGNoYWluSWQ6IHRoaXMuU0VQT0xJQV9DSEFJTl9JRCB9XVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgaWYgKGVycm9yLmNvZGUgPT09IDQ5MDIpIHtcbiAgICAgICAgYXdhaXQgZXRoZXJldW0ucmVxdWVzdCh7XG4gICAgICAgICAgbWV0aG9kOiAnd2FsbGV0X2FkZEV0aGVyZXVtQ2hhaW4nLFxuICAgICAgICAgIHBhcmFtczogW3tcbiAgICAgICAgICAgIGNoYWluSWQ6IHRoaXMuU0VQT0xJQV9DSEFJTl9JRCxcbiAgICAgICAgICAgIGNoYWluTmFtZTogJ1NlcG9saWEgVGVzdCBOZXR3b3JrJyxcbiAgICAgICAgICAgIG5hdGl2ZUN1cnJlbmN5OiB7XG4gICAgICAgICAgICAgIG5hbWU6ICdTZXBvbGlhRVRIJyxcbiAgICAgICAgICAgICAgc3ltYm9sOiAnU0VQJyxcbiAgICAgICAgICAgICAgZGVjaW1hbHM6IDE4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcnBjVXJsczogWydodHRwczovL3NlcG9saWEuaW5mdXJhLmlvL3YzLyddLFxuICAgICAgICAgICAgYmxvY2tFeHBsb3JlclVybHM6IFsnaHR0cHM6Ly9zZXBvbGlhLmV0aGVyc2Nhbi5pbyddXG4gICAgICAgICAgfV1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBZGQgdGhpcyBmdW5jdGlvbiB0byBnZW5lcmF0ZSByYW5kb20gd2FsbGV0IGFkZHJlc3Nlc1xuICBzdGF0aWMgZ2VuZXJhdGVSYW5kb21XYWxsZXRBZGRyZXNzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY2hhcnMgPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG4gICAgbGV0IGFkZHJlc3MgPSAnMHgnO1xuICAgIC8vIEdlbmVyYXRlIDQwIGNoYXJhY3RlcnMgKDIwIGJ5dGVzKSBmb3IgdGhlIGFkZHJlc3NcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpKyspIHtcbiAgICAgIGFkZHJlc3MgKz0gY2hhcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcnMubGVuZ3RoKV07XG4gICAgfVxuICAgIHJldHVybiBhZGRyZXNzO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldENvbm5lY3RlZFdhbGxldEFkZHJlc3MoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCEod2luZG93IGFzIGFueSkuZXRoZXJldW0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgaW5zdGFsbCBNZXRhTWFzaycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBldGhlcmV1bSA9ICh3aW5kb3cgYXMgYW55KS5ldGhlcmV1bTtcbiAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgZXRoZXJldW0ucmVxdWVzdCh7IFxuICAgICAgICBtZXRob2Q6ICdldGhfcmVxdWVzdEFjY291bnRzJyBcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4gYWNjb3VudHNbMF07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgd2FsbGV0IGFkZHJlc3M6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59ICJdLCJuYW1lcyI6WyJldGhlcnMiLCJ0b2FzdCIsIlBheW1lbnRTZXJ2aWNlIiwiZ2V0UHJvdmlkZXIiLCJ3aW5kb3ciLCJldGhlcmV1bSIsIkVycm9yIiwiQnJvd3NlclByb3ZpZGVyIiwicGF5RW50cnlGZWUiLCJhbW91bnQiLCJlcnJvciIsInN3aXRjaFRvU2Vwb2xpYSIsInByb3ZpZGVyIiwic2lnbmVyIiwiZ2V0U2lnbmVyIiwiYmFsYW5jZSIsImdldEJhbGFuY2UiLCJnZXRBZGRyZXNzIiwicGFyc2VFdGhlciIsImR1cmF0aW9uIiwib3BlbiIsInR4Iiwic2VuZFRyYW5zYWN0aW9uIiwidG8iLCJQTEFURk9STV9XQUxMRVQiLCJ2YWx1ZSIsImdhc0xpbWl0Iiwic3VjY2VzcyIsInJlY2VpcHQiLCJ3YWl0IiwiY29uc29sZSIsImxvZyIsImNvZGUiLCJtZXNzYWdlIiwidHJhbnNmZXJXaW5uaW5nc1RvV2lubmVyIiwid2lubmVyQWRkcmVzcyIsInRvdGFsUHJpemUiLCJCaWdJbnQiLCJ0b1N0cmluZyIsIm5ldHdvcmsiLCJyZXF1ZXN0IiwibWV0aG9kIiwicGFyYW1zIiwiY2hhaW5JZCIsIlNFUE9MSUFfQ0hBSU5fSUQiLCJjaGFpbk5hbWUiLCJuYXRpdmVDdXJyZW5jeSIsIm5hbWUiLCJzeW1ib2wiLCJkZWNpbWFscyIsInJwY1VybHMiLCJibG9ja0V4cGxvcmVyVXJscyIsImdlbmVyYXRlUmFuZG9tV2FsbGV0QWRkcmVzcyIsImNoYXJzIiwiYWRkcmVzcyIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJnZXRDb25uZWN0ZWRXYWxsZXRBZGRyZXNzIiwiYWNjb3VudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/paymentService.ts\n"));

/***/ })

});